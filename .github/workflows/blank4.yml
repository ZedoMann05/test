name: Backup dev database

on:
  workflow_dispatch:
  pull_request:
    branches:
      - 'development'
      - 'master'
      - 'staging'

jobs:
  backup_dev_db:
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: proj-dev

    strategy:
      matrix:
        Plan: [getpin-main-dev-db,getpin-ai-dev-db,getpin-osm-dev-db,getpin-posts-dev-db,getpin-statistics-dev-db]
    
    outputs:
      main_db_status: ${{ steps.steps_status.outputs.getpin-main-dev-db }}
      ai_db_status: ${{ steps.steps_status.outputs.getpin-ai-dev-db }}
      osm_db_status: ${{ steps.steps_status.outputs.getpin-osm-dev-db }}
      posts_db_status: ${{ steps.steps_status.outputs.getpin-posts-dev-db }}
      statistics_db_status: ${{ steps.steps_status.outputs.getpin-statistics-dev-db }}
      db_status: ${{ steps.steps_status.outputs.status }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        env:
            PLAN: ${{matrix.Plan}}

      - name: Create dump for ${{ matrix.Plan }}
        id: create_dump
        run: |
            DB_NAME=$(echo ${{ matrix.Plan }} | sed 's/-db//; s/-/_/g')
            gcloud sql export sql ${{ matrix.Plan }} --database $DB_NAME gs://getpin-backup-dev-db/${{ matrix.Plan }}/${DB_NAME}_$(TZ="Europe/Kiev" date +"%Y%m%d%H%M").sql

      - name: Check steps status
        if: ${{ always() }}
        id: steps_status
        run: |
          echo "status=${{ steps.create_dump.outcome }}" >> $GITHUB_OUTPUT
          echo "${{ matrix.Plan }}=${{ steps.create_dump.outcome }}" >> $GITHUB_OUTPUT

      - name: Limit backups count
        if: ${{ steps.create_dump.outcome == 'success' }}
        run: |
          BACKUPS_COUNT=$(gcloud storage ls gs://getpin-backup-dev-db/${{ matrix.Plan }}/${DB_NAME}* | wc -l)
          while [[ $BACKUPS_COUNT -gt 4 ]]; do
            OLDEST_BACKUP=$(gcloud storage ls gs://getpin-backup-dev-db/${{ matrix.Plan }}/${DB_NAME}* | sed 's/gs:\/\/getpin-backup-dev-db\/${{ matrix.Plan }}\///g' | sort -t_ -k4.13n -k4.5n -k4.7n -k4.9n -k4.11n | head -n1)
            gcloud storage rm gs://getpin-backup-dev-db/${{ matrix.Plan }}/$OLDEST_BACKUP
            BACKUPS_COUNT=$((BACKUPS_COUNT-1))
          done

  slack_notification:
    needs: backup_dev_db
    if: ${{ always() }}
    runs-on: ubuntu-latest
    env:
      PROJECT_ID: proj-dev
        
    steps:
      - name: Setting Slack Notification
        if: ${{ always() }}
        run: |
          MESSAGE=""
          for DB_STATUS in $(echo "${{ needs.backup_dev_db.outputs }}" | grep -oP '(?<=_db_status": ").*(?=")' | tr '\n' ' '); do
            echo "$DB_STATUS"
            if [ "$DB_STATUS" == 'failure' ]; then
              echo "$DB_STATUS"
              DB_NAME=$(echo "$DB_STATUS" | sed 's/_db_status//; s/_/-/g')
              MESSAGE+="Step: Create dump for $DB_NAME :x: \n\n <!channel>\n"
            fi
          done

          if [ -z "$MESSAGE" ]; then
            echo "SLACK_TITLE=Backup *${{ env.PROJECT_ID }}* database" >> $GITHUB_ENV
            echo "SLACK_MESSAGE=Backup is ready! :white_check_mark: \n\n <!channel>" >> $GITHUB_ENV
          else
            echo "SLACK_TITLE=Backup *${{ env.PROJECT_ID }}* database" >> $GITHUB_ENV
            echo "$MESSAGE" >> $GITHUB_ENV
          fi
          echo "SLACK_FOOTER=$(TZ="Europe/Kiev" date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV


      # - name: Slack Notification
      #   if: ${{ always() }}
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_COLOR: ${{ needs.backup_dev_db.result }}
      #     SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
      #     SLACK_TITLE: '${{ env.SLACK_TITLE }}'
      #     SLACK_FOOTER: 'Project: ${{ env.PROJECT_ID }}; Time: ${{ env.SLACK_FOOTER }}'
      #     SLACK_WEBHOOK: ${{ secrets.GETPIN_DEV_BACKUP_SLACK_CI_WEBHOOK }}
      #     SLACK_ICON: https://avatars.slack-edge.com/2023-02-15/4830237365520_6ec25f9ef61c9165fda5_48.jpg
      #     SLACKIFY_MARKDOWN: true