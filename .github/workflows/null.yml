name: Reset branch

on:
  workflow_dispatch:
    inputs:
      reset_to_branch:
        description: 'Reset to branch'     
        required: true

jobs:
  reset_branch:
    if: github.ref_name == 'development' || github.ref_name == 'staging' || github.event.inputs.reset_to_branch == 'main'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Fetch all branches
        run: |
          git fetch --prune --unshallow origin +refs/heads/*:refs/remotes/origin/*
          git fetch origin && git pull origin

      - name: Branch list
        run: |
          comm -12 <(sort <(git branch -r --no-merged origin/${{ github.event.inputs.reset_to_branch }} | sed 's/^ *origin\///')) <(sort <(git branch -r --merged origin/${{ github.ref_name }} | sed 's/^ *origin\///')) > branches_reset.txt    

      - name: Backup target branch
        run: |
          backup_branch="backup/${{ github.ref_name }}$(date +%Y%m%d%H%M)"
          git fetch origin ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}
          git checkout -b $backup_branch
          git push origin $backup_branch
    
      - name: Reset target branch to master
        run: |
          git fetch origin ${{ github.event.inputs.reset_to_branch }}
          git checkout ${{ github.event.inputs.reset_to_branch }}
          git pull origin ${{ github.event.inputs.reset_to_branch }}
          git checkout ${{ github.ref_name }}
          git reset --hard origin/${{ github.event.inputs.reset_to_branch }}
          git push --force origin ${{ github.ref_name }}

      - name: Filter branches and create PRs
        run: |
          touch branch.md
          while IFS= read -r branch; do
            if [[ $branch =~ ^(fix|hotfix|bugfix|feat|feature|breaking|chore)(\/getpin-[0-9]+)?\/.* ]]; then
                pr="[$(echo $branch)](https://github.com/ZedoMann05/test/compare/${{ github.ref_name }}...$(echo $branch))"
                echo "$pr" >> branch.md
            fi
          done < branches_reset.txt
          echo "SLACK_MESSAGE=$(cat branch.md)" >> $GITHUB_ENV
          echo "SLACK_FOOTER=$(date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV

      - name: Slack Notification
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: |
            The environment is ready to use! Reload the necessary commits!:
            ${{ env.SLACK_MESSAGE }}
          SLACK_TITLE: 'Reset DEV/STAGE to MASTER level'
          SLACK_FOOTER: 'Target Branch: ${{ github.ref_name }}; Time: ${{ env.SLACK_FOOTER }}'
          SLACK_WEBHOOK: ${{ secrets.GETPIN_DEVOPS_SLACK_CI_WEBHOOK }}
          SLACK_ICON: https://avatars.slack-edge.com/2023-02-15/4830237365520_6ec25f9ef61c9165fda5_48.jpg
          SLACKIFY_MARKDOWN: true