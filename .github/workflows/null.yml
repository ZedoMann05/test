name: Update branches

on:
  workflow_dispatch:
    inputs:
      reset_to_branch:
        description: 'Reset to branch'     
        required: true

jobs:
  update-branches:
    if: github.ref_name == 'development' || github.ref_name == 'staging'
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Fetch all branches
        run: |
          git fetch --prune --unshallow origin +refs/heads/*:refs/remotes/origin/*
          git fetch origin && git pull origin

      - name: Branch list
        run: |
          echo "prod"
          git branch -r --no-merged origin/${{ github.event.inputs.reset_to_branch }} | sed 's/^ *origin\///'
          echo "dev"
          git branch -r --merged origin/${{ github.ref_name }} | sed 's/^ *origin\///'
          comm -12 <(sort <(git branch -r --no-merged origin/${{ github.event.inputs.reset_to_branch }} | sed 's/^ *origin\///')) <(sort <(git branch -r --merged origin/${{ github.ref_name }} | sed 's/^ *origin\///')) > branches_reset.txt    

      - name: Backup target branch
        run: |
          backup_branch="backup/${{ github.ref_name }}$(date +%Y%m%d%H%M)"
          git fetch origin ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}
          git checkout -b $backup_branch
          git push origin $backup_branch
    
      - name: Reset target branch to master
        run: |
          git fetch origin ${{ github.event.inputs.reset_to_branch }}
          git checkout ${{ github.event.inputs.reset_to_branch }}
          git pull origin ${{ github.event.inputs.reset_to_branch }}
          git checkout ${{ github.ref_name }}
          git reset --hard origin/${{ github.event.inputs.reset_to_branch }}
          git push --force origin ${{ github.ref_name }}
          
      - name: Output Branch list
        run: cat branches_reset.txt
      
      - name: Filter branches and create PRs
        run: |
          while IFS= read -r branch; do
            if grep -q -E "^(fix|hotfix|bugfix|feat|feature|breaking|chore)((getpin-.+))?:.+" <<< "$branch"; then
                echo "${branch#*/}" >> branch.txt
            fi
          done < branches_reset.txt
          cat branch.txt
