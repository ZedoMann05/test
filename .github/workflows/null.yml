name: Reset branch

on:
  workflow_dispatch:
    inputs:
      reset_to_branch:
        description: 'Reset to branch'     
        required: true

jobs:
  validation_branch:
    runs-on: ubuntu-latest

    steps:
      - name: Validation branch
        id: validation-branch
        run: |
          if ${{ github.ref_name == 'development' && github.ref_name == 'staging' && github.event.inputs.reset_to_branch == 'main'}}; then
            exit 0
          else
            echo "SLACK_TITLE=Reset *${{ github.ref_name }}* to MASTER level" >> $GITHUB_ENV
            echo "SLACK_FOOTER=$(TZ="Europe/Kiev" date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV
            if [ ${{ github.ref_name }} != 'development' || ${{ github.ref_name }} != 'staging' ]; then
              echo "SLACK_MESSAGE=Incorrect name of target branch: ${{ github.ref_name }} :x:" >> $GITHUB_ENV
              exit 1
            elif [ ${{ github.event.inputs.reset_to_branch }} != 'main' ]; then
              echo "SLACK_MESSAGE=Incorrect name of the branch to which it will be reset: :white_check_mark: ${{ github.event.inputs.reset_to_branch }} :x:" >> $GITHUB_ENV
              exit 1
            fi
          fi
          
      - name: Slack Notification
        if: ${{ always() && steps.validation-branch.outcome == 'failure' }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
          SLACK_TITLE: '${{ env.SLACK_TITLE }}'
          SLACK_FOOTER: 'Target Branch: ${{ github.ref_name }}; Time: ${{ env.SLACK_FOOTER }}'
          SLACK_WEBHOOK: ${{ secrets.GETPIN_DEVOPS_SLACK_CI_WEBHOOK }}
          SLACK_ICON: https://avatars.slack-edge.com/2023-02-15/4830237365520_6ec25f9ef61c9165fda5_48.jpg
          SLACKIFY_MARKDOWN: true

  reset_branch:
    needs: validation_branch
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ssh-key: ${{ secrets.DEPLOY_SSH_KEY }}
      
      - name: Fetch all branches
        id: fetch-all-branches
        run: |
          git fetch --prune --unshallow origin +refs/heads/*:refs/remotes/origin/*
          git fetch origin && git pull origin

      - name: Branch list
        id: branch-list
        run: |
          comm -12 <(sort <(git branch -r --no-merged origin/${{ github.event.inputs.reset_to_branch }} | sed 's/^ *origin\///')) <(sort <(git branch -r --merged origin/${{ github.ref_name }} | sed 's/^ *origin\///')) > branches_reset.txt
          cat branches_reset.txt

      - name: Backup target branch
        id: backup-target-branch
        run: |
          backup_branch="backup/${{ github.ref_name }}_$(TZ="Europe/Kiev" date +"%Y%m%d%H%M")"
          git fetch origin ${{ github.ref_name }}
          git checkout ${{ github.ref_name }}
          git pull origin ${{ github.ref_name }}
          git checkout -b $backup_branch
          git push origin $backup_branch
    
      - name: Reset target branch to master
        id: reset-target-branch-to-master
        run: |
          git fetch origin ${{ github.event.inputs.reset_to_branch }}
          git checkout ${{ github.event.inputs.reset_to_branch }}
          git pull origin ${{ github.event.inputs.reset_to_branch }}
          git checkout ${{ github.ref_name }}
          git reset --hard origin/${{ github.event.inputs.reset_to_branch }}
          git push --force origin ${{ github.ref_name }}

      - name: Filter branches and create PRs
        id: filter-branches-and-create-pr
        run: |
          touch branch.md
          while IFS= read -r branch; do
            if [[ $branch =~ ^(fix|hotfix|bugfix|feat|feature|breaking|chore)(\/getpin-[0-9]+)?\/.* ]]; then
                pr="\n[$(echo $branch)](https://github.com/ZedoMann05/test/compare/${{ github.ref_name }}...$(echo $branch))"
                echo -n "$pr" >> branch.md
            fi
          done < branches_reset.txt
      
      - name: Setting Slack Notification
        if: ${{ always() }}
        run: |
          if ${{ steps.fetch-all-branches.outcome == 'success' && steps.branch-list.outcome == 'success' && steps.backup-target-branch.outcome == 'success' && steps.reset-target-branch-to-master.outcome == 'success' && steps.filter-branches-and-create-pr.outcome == 'success' }}; then
            if [[ ! -s "branch.md" ]]; then
              echo "SLACK_TITLE=Reset *${{ github.ref_name }}* to MASTER level" >> $GITHUB_ENV
              echo "SLACK_MESSAGE=The environment is ready to use! :white_check_mark:" >> $GITHUB_ENV
              echo "SLACK_FOOTER=$(TZ="Europe/Kiev" date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV
            else
              echo "SLACK_TITLE=Reset *${{ github.ref_name }}* to MASTER level" >> $GITHUB_ENV
              echo "SLACK_MESSAGE=The environment is ready to use! :white_check_mark: \n Reload the necessary commits!: $(cat branch.md)" >> $GITHUB_ENV
              # echo "SLACK_MESSAGE=$(cat branch.md)" >> $GITHUB_ENV
              echo "SLACK_FOOTER=$(TZ="Europe/Kiev" date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV
            fi
          else
            echo "SLACK_TITLE=Reset *${{ github.ref_name }}* to MASTER level" >> $GITHUB_ENV
            echo "SLACK_FOOTER=$(TZ="Europe/Kiev" date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV
            if [ ${{ steps.fetch-all-branches.outcome }} == 'failure' ]; then 
              echo "SLACK_MESSAGE=Step: Fetch all branches :x:" >> $GITHUB_ENV  
            elif [ ${{ steps.branch-list.outcome }} == 'failure' ]; then 
              echo "SLACK_MESSAGE=Step: Branch list :x:" >> $GITHUB_ENV
            elif [ ${{ steps.backup-target-branch.outcome }} == 'failure' ]; then
              echo "SLACK_MESSAGE=Step: Backup target branch :x:" >> $GITHUB_ENV
            elif [ ${{ steps.reset-target-branch-to-master.outcome }} == 'failure' ]; then 
              echo "SLACK_MESSAGE=Step: Reset target branch to master :x:" >> $GITHUB_ENV
            elif [ ${{ steps.filter-branches-and-create-pr.outcome }} == 'failure' ]; then
              echo "SLACK_MESSAGE=Step: Filter branches and create PRs :x:" >> $GITHUB_ENV
            fi
          fi
      
      - name: Slack Notification
        if: ${{ always() }}
        uses: rtCamp/action-slack-notify@v2
        env:
          SLACK_COLOR: ${{ job.status }}
          SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
          SLACK_TITLE: '${{ env.SLACK_TITLE }}'
          SLACK_FOOTER: 'Target Branch: ${{ github.ref_name }}; Time: ${{ env.SLACK_FOOTER }}'
          SLACK_WEBHOOK: ${{ secrets.GETPIN_DEVOPS_SLACK_CI_WEBHOOK }}
          SLACK_ICON: https://avatars.slack-edge.com/2023-02-15/4830237365520_6ec25f9ef61c9165fda5_48.jpg
          SLACKIFY_MARKDOWN: true