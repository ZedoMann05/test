name: Check Assets Sizes

on:
  workflow_call:
    inputs:
      ignored_paths:
        required: true
        type: string
      asset_paths:
        required: true
        type: string
      types:
        required: true
        type: string


jobs:
  check_file_sizes:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Run file size check script
      env:
        ignored_paths: ${{ inputs.ignored_paths }}
        asset_paths: ${{ inputs.asset_paths }}
        types: ${{ inputs.types }}
      run: |
        #!/bin/bash

        declare -A limits
        declare -A errors
        declare -A warnings

        # Parse input parameters for asset types and their limits
        parse_input_params() {
            local input_types="$1"
            local type_limit_pair
            for type_limit_pair in $input_types; do
                local type=$(echo "$type_limit_pair" | cut -d':' -f1)
                local limit=$(echo "$type_limit_pair" | cut -d':' -f2)
                # Convert limit to bytes if it's in human-readable format
                case $limit in
                    *GB) limit=$(( ${limit%GB} * 1024 * 1024 * 1024 ));;
                    *MB) limit=$(( ${limit%MB} * 1024 * 1024 ));;
                    *KB) limit=$(( ${limit%KB} * 1024 ));;
                esac
                limits["$type"]="$limit"
            done
        }

        # Function to convert file size to human-readable format
        convert() {
            local bytes=$1
            local units=("bytes" "KB" "MB" "GB" "TB")
            local i=0
            while (( bytes > 1024 )); do
                (( bytes /= 1024 ))
                (( i++ ))
            done
            echo "$bytes ${units[i]}"
        }

        check_file_size() {
            local file="$1"
            local size=$(stat -c %s "$file")
            local extension="${file##*.}"
            local extension="${extension,,}"
            local limit="${limits[$extension]}"
            
            if [ -n "$limit" ]; then
                if [ "$size" -gt "$limit" ]; then
                    if [[ " ${IGNORED_ASSETS[*]} " =~ "$file" ]]; then
                        echo -e "::warning::File $file exceeds the limit for type .$extension \e[31mSize\e[0m: $(convert $size) (\e[32mLimit\e[0m: $(convert $limit))"
                        warnings["$extension"]+="- \`$file\` Size: <b>$(convert $size)</b>\n"
                        total_warnings=$((total_warnings + 1))
                    else
                        echo -e "::error::File $file exceeds the limit for type .$extension \e[31mSize\e[0m: $(convert $size) (\e[32mLimit\e[0m: $(convert $limit))"
                        errors["$extension"]+="- \`$file\` Size: <b>$(convert $size)</b>\n"
                        total_errors=$((total_errors + 1))
                    fi
                fi
            fi
        }

        # Main script starts here

        # Parse input parameters for asset types and their limits
        parse_input_params "$types"

        IGNORED_ASSETS=($(echo -e "$ignored_paths"))
        ASSET_PATHS=($(echo -e "$asset_paths"))

        total_errors=0
        total_warnings=0

        recursive_check() {
            local current_path="$1"
            if [ -d "$current_path" ]; then
                for item in "$current_path"/*; do
                    if [ -f "$item" ]; then
                        check_file_size "$item"
                    elif [ -d "$item" ]; then
                        recursive_check "$item"
                    fi
                done
            else
                check_file_size "$current_path"
            fi
        }

        for path in "${ASSET_PATHS[@]}"; do
            recursive_check "$path"
        done

        # Print report
        echo "# Assets Size Validation Report" > ./report.md

        if [ $total_errors -gt 0 ] && [ $total_warnings -gt 0 ]; then
            echo "Status: \`FAILED\`" >> ./report.md
            echo -e "\nSome assets exceed the specified limit in the following directories: \`${ASSET_PATHS[*]}\`" >> ./report.md
            echo -e "\nTotal Errors: <b>$total_errors</b>" >> ./report.md
            echo -e "Total Warnings: <b>$total_warnings</b>" >> ./report.md
            echo -e "\n## Errors" >> ./report.md

            for extension in "${!errors[@]}"; do
                echo -e "<b>$extension</b>" >> ./report.md
                echo -e "Limit: <b>$(convert ${limits[$extension]})</b>" >> ./report.md
                echo -e "${errors[$extension]}" >> ./report.md
            done

            echo -e "\n## Warnings" >> ./report.md

            for extension in "${!warnings[@]}"; do
                echo -e "<b>$extension</b>" >> ./report.md
                echo -e "Limit: <b>$(convert ${limits[$extension]})</b>" >> ./report.md
                echo -e "${warnings[$extension]}" >> ./report.md
            done
            exit 1  # Exiting with code 1 for FAILED status
        elif [ $total_errors -eq 0 ] && [ $total_warnings -gt 0 ]; then
            echo "Status: \`WARNING\`" >> ./report.md
            echo -e "\nSome assets exceed the specified limit in the following directories: \`${ASSET_PATHS[*]}\`, but they do not fail the validation because they are ignored by configuration." >> ./report.md
            echo -e "\nTotal Warnings: <b>$total_warnings</b>" >> ./report.md
            echo -e "\n## Warnings" >> ./report.md

            for extension in "${!warnings[@]}"; do
                echo -e "<b>$extension</b>" >> ./report.md
                echo -e "Limit: <b>$(convert ${limits[$extension]})</b>" >> ./report.md
                echo -e "${warnings[$extension]}" >> ./report.md
            done
        elif [ $total_errors -gt 0 ] && [ $total_warnings -eq 0 ]; then
            echo "Status: \`FAILED\`" >> ./report.md
            echo -e "\nSome assets exceed the specified limit in the following directories: \`${ASSET_PATHS[*]}\`" >> ./report.md
            echo -e "\nTotal Errors: <b>$total_errors</b>" >> ./report.md
            echo -e "\n## Errors" >> ./report.md

            for extension in "${!errors[@]}"; do
                echo -e "<b>$extension</b>" >> ./report.md
                echo -e "Limit: <b>$(convert ${limits[$extension]})</b>" >> ./report.md
                echo -e "${errors[$extension]}" >> ./report.md
            done
            exit 1  # Exiting with code 1 for FAILED status
        else
            echo "Status: \`SUCCESS\`" >> ./report.md
            echo -e "\nAll assets match the size limit for their file types in the following directories: \`${ASSET_PATHS[*]}\`." >> ./report.md
            echo -e "\nNo actions required." >> ./report.md
        fi

    - name: Post report as comment
      if: ${{ always() }}
      uses: thollander/actions-comment-pull-request@v2
      with:
        filePath: ./report.md