name: front

on:
  workflow_call:
    inputs:
      front_paths:
        required: true
        type: string
      microservice_name:
        required: true
        type: string
      node_version:
        required: true
        type: string
    secrets:
      GCP_CREDENTIALS_DEPLOY_FRONT:
        required: true

jobs:
  set_env:
    runs-on: ubuntu-latest
    env:
      MICROSERVICE_NAME: ${{ inputs.microservice_name }}
    
    outputs:
      PROJECT_ID: ${{ steps.set_env.outputs.project_id }}
      BUCKET_URL: ${{ steps.set_env.outputs.bucket_url }}
      BUCKET_BACKUP_URL: ${{ steps.set_env.outputs.bucket_backup_url }}
    
    steps:
      - name: set env
        id: set_env
        run: |
          if [ "${{ github.ref_name }}" == "development" ]; then
            echo "project_id=majestic-energy-420321" >> $GITHUB_OUTPUT
            echo "bucket_url=gs://${{ env.MICROSERVICE_NAME }}-dev" >> $GITHUB_OUTPUT
            ${{ secrets.GCP_CREDENTIALS_DEPLOY_FRONT }}=${{ secrets.TEST_FRONT  }}
            echo "GCP_CREDENTIALS_DEPLOY_FRONT=${{ secrets.TEST_FRONT  }}" >> $GITHUB_SECRETS
            echo "Set ENV to development."
          elif [ "${{ github.ref_name }}" == "staging" ]; then
            echo "project_id=majestic-energy-420321" >> $GITHUB_OUTPUT
            echo "bucket_url=gs://${{ env.MICROSERVICE_NAME }}-dev" >> $GITHUB_OUTPUT
            echo "Set ENV to staging."
          fi
    
  deploy_front:
    runs-on: ubuntu-latest
    needs: set_env
    env:
      PROJECT_ID: ${{ needs.set_env.outputs.PROJECT_ID }}
      FRONT_PATH: ${{ inputs.front_paths }}
      BUCKET_URL: ${{ needs.set_env.outputs.BUCKET_URL }}
      BUCKET_BACKUP_URL: ${{ needs.set_env.outputs.BUCKET_BACKUP_URL }}
      NODE_VERSION: ${{ inputs.node_version }}
      COMMIT_SHA: ${{ github.event.inputs.commit_sha }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
    
      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: '${{ secrets.GCP_CREDENTIALS_DEPLOY_FRONT }}'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v0.2.1
        with:
          project_id: ${{ env.PROJECT_ID }}
        
      - uses: actions/setup-node@v4
        with:
            node-version: '${{ env.NODE_VERSION }}'

      - name: choice commit
        if: ${{ github.event.inputs.rollback == 'yes' }}
        id: choice_commit
        run: |
          git fetch origin && git pull origin
          git checkout ${{ env.COMMIT_SHA }}
            
      - name: npm install
        id: npm_install
        run: |
          cd ${{ env.FRONT_PATH }}
          npm install
    
      - name: npm build
        id: npm_build
        run: |
          cd ${{ env.FRONT_PATH }}
          npm run build
      
      - name: deploy front
        id: deploy_front
        run: |
          cd ${{ env.FRONT_PATH }}/build
          if [ -n "$(gcloud storage ls ${{ env.BUCKET_URL }})" ]; then
            gcloud storage rm -r ${{ env.BUCKET_URL }}/*
          fi
          gcloud storage cp -r ./* ${{ env.BUCKET_URL }}
          gcloud storage objects update -r ${{ env.BUCKET_URL }}/* --add-acl-grant=entity=allUsers,role=READER

      - name: Setting Slack Notification
        if: ${{ always() }}
        run: |
          SLACK_MESSAGE="Deploy front is ready! :white_check_mark: \n\n <!channel>"

          step_names=($(echo '${{ toJson(steps) }}' | jq -r 'keys_unsorted[]'))

          for output in "${step_names[@]}"; do
            step_status=$(echo '${{ toJson(steps) }}' | jq -r ".$output.outcome")
            echo $step_status
            echo $output
            if [ "$step_status" == 'failure' ]; then
              failed_step=$(echo "$output" | sed 's/_/ /g')
              SLACK_MESSAGE="Step: $failed_step :x: \n <!channel>"
            fi
          done
            
          echo "SLACK_TITLE=Deploy front: ${{ inputs.microservice_name }}" >> $GITHUB_ENV
          echo "SLACK_MESSAGE=$SLACK_MESSAGE" >> $GITHUB_ENV
          echo "SLACK_FOOTER=$(TZ="Europe/Kiev" date +"%Y-%m-%dT%H:%M:%S")" >> $GITHUB_ENV  
          echo $SLACK_MESSAGE

      # - name: Slack Notification
      #   if: ${{ always() }}
      #   uses: rtCamp/action-slack-notify@v2
      #   env:
      #     SLACK_COLOR: ${{ job.status }}
      #     SLACK_MESSAGE: ${{ env.SLACK_MESSAGE }}
      #     SLACK_TITLE: '${{ env.SLACK_TITLE }}'
      #     SLACK_FOOTER: 'Microservice: ${{ inputs.microservice_name }}; Env: ${{ github.ref_name }}; Time: ${{ env.SLACK_FOOTER }}'
      #     SLACK_WEBHOOK: ${{ secrets.GETPIN_DEV_BACKUP_SLACK_CI_WEBHOOK }}
      #     SLACK_ICON: https://avatars.slack-edge.com/2023-02-15/4830237365520_6ec25f9ef61c9165fda5_48.jpg
      #     SLACKIFY_MARKDOWN: true
